# nginx的用户/组
user  www-data www-data;
# 开启进程数/启动进程
worker_processes  1;
#全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
error_log   logs/error.log crit;
pid        logs/nginx.pid;
#工作模式及连接数上限
events {
    #使用epoll(linux2.6高性能模式)
    use epoll;
    # 每个进程最大连接数
    worker_connections  1024;
}
#设定http服务器，利用nginx的反向代理功能提供负载均衡支持
http {
    #设置mime类型,内容加载自/usr/local/nginx/conf/mime.types文件
    include       mime.types;
    #默认文件类型
    default_type  application/octet-stream;
    #设定日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    log_format download '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        '"$http_range" "$sent_http_content_range"';
    # 设定access log
    access_log  logs/access.log  main;
    
    #设定请求缓冲 
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    #长链接超时时间
    keepalive_timeout 125;
    client_header_timeout 3m;
    client_body_timeout 3m;
    send_timeout 3m;
    tcp_nopush on;
    tcp_nodelay on;

    #开启gzip模块 
    gzip  on;
    gzip_min_length 1100;
    gzip_buffers 4 8k;
    gzip_types text/plain;
    output_buffers 1 32k;
    postpone_output 1460;

    #设定负载均衡的服务器列表
    #upstream mysvr { 
     #weigth参数表示权值，权值越高被分配到的几率越大
     #本机上的Squid开启3128端
     #server 127.0.0.1:9000 weight=5;
     #server 127.0.0.1:9001 weight=1;
     #server 127.0.0.1:9002 weight=6;
    #}
    #设定虚拟主机
    server {
        listen       81;
        server_name  localhost;
        #设置程序编码
        #charset gb2312;
        #设定本虚拟主机的访问日志
        #access_log  logs/host.access.log  main;
        #
        #假如访问 /img/*, /js/*, /css/* 资源,则直接取本地文档,不通过squid
        #假如这些文档较多，不推荐这种方式，因为通过squid的缓存效果更好
        #location ~^/(img|js|css)/ {
        # #指定文件的存放路径
        # root /site/html;
        # #控制其在浏览器的缓存
        # expires 24h;
        #}
        #对 "/" 启用负载均衡
        #location / {
          #proxy_pass http://mysvr;
          #proxy_redirect off;
          #proxy_set_header Host $host;
          #proxy_set_header X-Real-IP $remote_addr;
          #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          #client_max_body_size 10m;
          #client_body_buffer_size 128k;
          #proxy_connect_timeout 90;
          #proxy_send_timeout 90;
          #proxy_read_timeout 90;
          #proxy_buffer_size 4k;
          #proxy_buffers 4 32k;
          #proxy_busy_buffers_size 64k;
          #proxy_temp_file_write_size 64k;
        #}

        location / {
            #指nginx安装目录下html目录为文件存放目录
            root   html;
            # 设置默认首页
            index index.html index.htm;
        }
        # 重定向nginx错误页面
        # 同样的方式可以定义常见的403、500等错误
        # 特别注意的是404.html文件页面大小要超过512k，不然会被ie浏览器替换为ie默认的错误页面
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        # 设定查看Nginx状态的地址
        # 访问http://localhost/NginxStatus/
        location ~^/status/? {
          stub_status on; #Nginx 状态监控配置
          access_log off;
          auth_basic "Nginx Status";
          auth_basic_user_file nginx.pwd;
          #allow 127.0.0.1;
        }
        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
            root           /var/www/vhosts;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /var/www$fastcgi_script_name;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

 server{
    listen         81;
    server_name    demo.secure.praxislanguage.com;

    #location / {
     index          index.php;
     root           /var/www/vhosts/crm2/public;
    #}
    
    rewrite "^/(.+\.(txt|jpg|gif|jped|png|bmp|ico|css|js|html|htm|flv|swf|pdf|mp3|wma|rar))$" /$1 break;
    rewrite "^/index.php(\?(.+))?$" /index.php?url=$3 last;
    rewrite "^([^\?]*)(\?(.+))?$" /index.php?url=$1&$3 last;

    location ~ \.php$ {
     #root           /var/www/vhosts/crm2/public;
     fastcgi_pass   127.0.0.1:9000;
     #fastcgi_index  index.php;
     fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
     include        fastcgi_params;
    }
 }
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
